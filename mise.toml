[tools]
golang = "1.22"
golangci-lint = "1.60"
"go:mvdan.cc/sh/v3/cmd/shfmt" = "latest"
"go:gotest.tools/gotestsum" = "v1.12.0"
"go:golang.org/x/tools/cmd/goimports" = "latest"
"go:github.com/thenativeweb/get-next-version" = "latest"
"go:github.com/getoutreach/lintroller/cmd/lintroller" = "v1.18.2"

[tasks.build]
env = { "CGO_ENABLED" = "0" }
description = "Build tools"
run = """
if [ "${PGNGEN_DEBUG:-0}" = "1" ]; then
  go build -tags=pgngen_debug -o ./bin/ ./cmd/*
else
  go build -o ./bin/ ./cmd/*
fi
"""

[tasks.buildcover]
env = { "CGO_ENABLED" = "0" }
description = "Build tools with coverage"
run = """
if [ "${PGNGEN_DEBUG:-0}" = "1" ]; then
  go build -tags=pgngen_debug -cover -o ./bincover/ ./cmd/*
else
  go build -cover -o ./bincover/ ./cmd/*
fi
"""

[tasks.pgngen]
env = { "CGO_ENABLED" = "0" }
description = "Generate Pgninfo"
run = "./bin/pgngen"

[tasks.test-debug]
description = "Run tests with debug enabled"
run = "PGNGEN_DEBUG=1 go test -tags=pgngen_debug ./..."

[tasks.test]
description = "Run normal tests"
run = "go test ./..."

[tasks.lint]
description = "Run linters"
run = [
  "golangci-lint run",
  "lintroller -config lintroller.yaml ./...",
]

[tasks.fmt]
alias = "format"
description = "Format code"
run = [
  "go mod tidy",
  "gofmt -s -w .",
  "goimports -w .",
  "shfmt -w -i 2 -ci -sr .",
]

[tasks.build-debug]
description = "Build with debug fields included"
run = '''
rm -f pgninfo_generated.go
PGNGEN_DEBUG=1 mise run build
PGNGEN_DEBUG=1 mise run pgngen
PGNGEN_DEBUG=1 mise run build
'''

[tasks.build-release]
description = "Build without debug fields"
run = '''
rm -f pgninfo_generated.go
PGNGEN_DEBUG=0 mise run build
PGNGEN_DEBUG=0 mise run pgngen
PGNGEN_DEBUG=0 mise run build
'''
